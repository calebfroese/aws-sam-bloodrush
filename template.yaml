AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  AWS backend for Bloodrush

Globals:
  Function:
    Timeout: 300

Resources:
  ################
  #    Cognito   #
  ################

  CognitoPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: 'Bloodrush'
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      LambdaConfig:
        PostConfirmation: !GetAtt PostAuthenticationLambda.Arn

  WebClientCognito:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: 'Bloodrush Web'
      UserPoolId: !Ref CognitoPool

  ################
  #    Lambda    #
  ################

  PostAuthenticationLambda:
    Type: AWS::Serverless::Function
    Properties:
      Tracing: Active
      CodeUri: dist/prod
      Handler: lambdas.postAuthentication
      Runtime: nodejs8.10
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'dynamodb:PutItem'
              Resource:
                - !GetAtt AccountsTable.Arn
      Environment:
        Variables:
          DB_ACCOUNTS: !Ref AccountsTable

  AddPlayersToMarketplaceLambda:
    Type: AWS::Serverless::Function
    Properties:
      Tracing: Active
      CodeUri: dist/prod
      Handler: lambdas.addPlayersToMarketplace
      Runtime: nodejs8.10
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'dynamodb:BatchWriteItem'
              Resource:
                - !GetAtt PlayersTable.Arn
      Events:
        Timer:
          Type: Schedule
          Properties:
            Schedule: rate(1 hour)
      Environment:
        Variables:
          DB_PLAYERS: !Ref PlayersTable
          PLAYER_COUNT: 5
          PLAYER_TTL_DAYS: 30

  CreateTeamLambda:
    Type: AWS::Serverless::Function
    Properties:
      Tracing: Active
      CodeUri: dist/prod
      Handler: lambdas.createTeam
      Runtime: nodejs8.10
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'dynamodb:PutItem'
              Resource:
                - !GetAtt TeamsTable.Arn
            - Effect: Allow
              Action:
                - 'dynamodb:UpdateItem'
              Resource:
                - !GetAtt AccountsTable.Arn
      Events:
        Timer:
          Type: Schedule
          Properties:
            Schedule: rate(1 hour)
      Environment:
        Variables:
          DB_ACCOUNTS: !Ref AccountsTable
          DB_TEAMS: !Ref TeamsTable

  # Permissions

  PostAuthenticationLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref PostAuthenticationLambda
      Principal: cognito-idp.amazonaws.com

  ################
  #   DynamoDB   #
  ################

  PlayersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TimeToLiveSpecification:
        AttributeName: 'expireAt'
        Enabled: true

  AccountsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
          # Cognito users username
        - AttributeName: username
          AttributeType: S
      KeySchema:
        - AttributeName: username
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  TeamsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  GamesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: round
          AttributeType: N
        - AttributeName: date
          AttributeType: S
      KeySchema:
        - AttributeName: round
          KeyType: HASH
        - AttributeName: date
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  #################
  #    AppSync    #
  #################

  BloodrushQLApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: 'BloodrushQLApi'
      AuthenticationType: AMAZON_COGNITO_USER_POOLS
      UserPoolConfig:
        UserPoolId: !Ref CognitoPool
        AwsRegion: !Ref AWS::Region
        DefaultAction: ALLOW

  BloodrushQLSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt BloodrushQLApi.ApiId
      Definition: |
        schema {
          query: Query
          mutation: Mutation
          subscription: Subscription
        }
        type Account {
          # Unique cognito username identifier
          username: ID!
          name: String
        }
        type PaginatedPlayers {
          players: [Player]!
          nextToken: String
        }
        type Player {
          id: ID!
          name: String
          firstName: String
          lastName: String
          countryOfOrigin: String
        }
        type Team {
          id: ID!
          name: String!
          owned: Boolean!
        }
        type Game {
          round: Int!
          date: AWSDateTime!
        }
        type Query {
          getAccount: Account
          getPlayers(limit: Int nextToken: String): PaginatedPlayers
          getTeams: [Team]!
          getGames: [Game]!
        }
        type Mutation {
          createTeam(name: String! abbreviation: String!): Team!
        }
        type Subscription {
          subscribeToTeams: Team
            @aws_subscribe(mutations: ["createTeam"])
        }

  ###########################
  #    AppSync Resolvers    #
  ###########################

  TeamOwnedResolver:
    DependsOn: BloodrushQLSchema
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt BloodrushQLApi.ApiId
      TypeName: 'Team'
      FieldName: 'owned'
      DataSourceName: !GetAtt LocalDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "payload": "${ctx.source.owner}"
        }
      ResponseMappingTemplate: |
        #if($ctx.result == $context.identity.username)
            true
        #else
            false
        #end

  GetGamesResolver:
    DependsOn: BloodrushQLSchema
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt BloodrushQLApi.ApiId
      TypeName: 'Query'
      FieldName: 'getGames'
      DataSourceName: !GetAtt GamesTableDataSource.Name
      RequestMappingTemplate: |
        {
            "version": "2017-02-28",
            "operation": "Scan"
        }
      ResponseMappingTemplate: |
        $utils.toJson($ctx.result.Items)

  GetPlayersResolver:
    DependsOn: BloodrushQLSchema
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt BloodrushQLApi.ApiId
      TypeName: 'Query'
      FieldName: 'getPlayers'
      DataSourceName: !GetAtt PlayersTableDataSource.Name
      RequestMappingTemplate: |
        {
            "version": "2017-02-28",
            "operation": "Scan",
            "limit": $util.defaultIfNull(${ctx.args.limit}, 20),
            "nextToken": $util.toJson($util.defaultIfNullOrBlank($ctx.args.nextToken, null))
        }
      ResponseMappingTemplate: |
        {
          "players": $utils.toJson($context.result.Items),
          "nextToken": $util.toJson($context.result.nextToken)
        }

  # Queries

  GetAccountResolver:
    DependsOn: BloodrushQLSchema
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt BloodrushQLApi.ApiId
      TypeName: 'Query'
      FieldName: 'getAccount'
      DataSourceName: !GetAtt AccountsTableDataSource.Name
      RequestMappingTemplate: |
        {
            "version": "2017-02-28",
            "operation": "GetItem",
            "key": {
              "username": { "S": "${ctx.identity.username}" }
            }
        }
      ResponseMappingTemplate: |
        $utils.toJson($ctx.result.Items)

  GetTeamsResolver:
    DependsOn: BloodrushQLSchema
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt BloodrushQLApi.ApiId
      TypeName: 'Query'
      FieldName: 'getTeams'
      DataSourceName: !GetAtt TeamsTableDataSource.Name
      RequestMappingTemplate: |
        {
            "version": "2017-02-28",
            "operation": "Scan"
        }
      ResponseMappingTemplate: |
        $utils.toJson($ctx.result.Items)

  GetGamesResolver:
    DependsOn: BloodrushQLSchema
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt BloodrushQLApi.ApiId
      TypeName: 'Query'
      FieldName: 'getGames'
      DataSourceName: !GetAtt GamesTableDataSource.Name
      RequestMappingTemplate: |
        {
            "version": "2017-02-28",
            "operation": "Scan"
        }
      ResponseMappingTemplate: |
        $utils.toJson($ctx.result.Items)

  # Mutations

  CreateTeamResolver:
    DependsOn: BloodrushQLSchema
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt BloodrushQLApi.ApiId
      TypeName: 'Mutation'
      FieldName: 'createTeam'
      DataSourceName: !GetAtt CreateTeamDataSource.Name
      RequestMappingTemplate: |
        {
            "version": "2017-02-28",
            "operation": "Invoke",
            "payload": {
              "username": "${ctx.identity.username}",
              "team": {
                "name": "${ctx.args.name}",
                "abbreviation": "${ctx.args.abbreviation}"
              }
            }
        }
      ResponseMappingTemplate: |
        $utils.toJson($ctx.result)

  #############################
  #    AppSync Datasources    #
  #############################
  CreateTeamDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt BloodrushQLApi.ApiId
      Name: 'CreateTeamDataSource'
      Type: 'AWS_LAMBDA'
      ServiceRoleArn: !GetAtt ServiceRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt CreateTeamLambda.Arn

  PlayersTableDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt BloodrushQLApi.ApiId
      Name: 'PlayersTableDataSource'
      Type: 'AMAZON_DYNAMODB'
      DynamoDBConfig:
        TableName: !Ref PlayersTable
        AwsRegion: !Ref AWS::Region
      ServiceRoleArn: !GetAtt ServiceRole.Arn

  AccountsTableDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt BloodrushQLApi.ApiId
      Name: 'AccountsTableDataSource'
      Type: 'AMAZON_DYNAMODB'
      DynamoDBConfig:
        TableName: !Ref AccountsTable
        AwsRegion: !Ref AWS::Region
      ServiceRoleArn: !GetAtt ServiceRole.Arn

  TeamsTableDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt BloodrushQLApi.ApiId
      Name: 'TeamsTableDataSource'
      Type: 'AMAZON_DYNAMODB'
      DynamoDBConfig:
        TableName: !Ref TeamsTable
        AwsRegion: !Ref AWS::Region
      ServiceRoleArn: !GetAtt ServiceRole.Arn

  GamesTableDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt BloodrushQLApi.ApiId
      Name: 'GamesTableDataSource'
      Type: 'AMAZON_DYNAMODB'
      DynamoDBConfig:
        TableName: !GetAtt GamesTable.Arn
        AwsRegion: !Ref AWS::Region
      ServiceRoleArn: !GetAtt ServiceRole.Arn

  LocalDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt BloodrushQLApi.ApiId
      Name: 'LocalDataSource'
      Description: 'Local AppSync datasource'
      Type: 'NONE'
      ServiceRoleArn: !GetAtt ServiceRole.Arn

  ##############################
  #    IAM Roles & Policies    #
  ##############################

  DynamoDBAccessPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: 'dynamodb-access'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action: 'dynamodb:*'
            Resource:
              - !GetAtt TeamsTable.Arn
              - !GetAtt GamesTable.Arn
      Roles:
        - Ref: ServiceRole

  ServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'appsync.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        Statement:
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'dynamodb:Scan'
                Resource:
                  - !GetAtt PlayersTable.Arn
              - Effect: 'Allow'
                Action:
                  - 'lambda:InvokeFunction'
                Resource:
                  - !GetAtt CreateTeamLambda.Arn

  ##########################
  #    Template Outputs    #
  ##########################

Outputs:
  GraphQLApi:
    Description: GraphQL endpoint
    Value: !GetAtt BloodrushQLApi.GraphQLUrl
  UserPoolId:
    Description: User pool id
    Value: !Ref CognitoPool
  WebUserPoolClientId:
    Description: Web user pool client ID
    Value: !Ref WebClientCognito
