AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  AWS backend for Bloodrush

Globals:
  Function:
    Timeout: 300

Resources:
  ################
  #    Cognito   #
  ################

  CognitoPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: 'Bloodrush'
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email

  WebClientCognito:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: 'Bloodrush Web'
      UserPoolId: !Ref CognitoPool

  ################
  #   DynamoDB   #
  ################

  TeamsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  GamesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: round
          AttributeType: N
        - AttributeName: date
          AttributeType: S
      KeySchema:
        - AttributeName: round
          KeyType: HASH
        - AttributeName: date
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  #################
  #    AppSync    #
  #################

  BloodrushQLApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: 'BloodrushQLApi'
      AuthenticationType: AWS_IAM
      UserPoolConfig:
        UserPoolId: !Ref CognitoPool
        AwsRegion: !Ref AWS::Region
        DefaultAction: ALLOW

  BloodrushQLSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt BloodrushQLApi.ApiId
      Definition: |
        schema {
          query: Query
          mutation: Mutation
          subscription: Subscription
        }
        type Team {
          id: ID!
          name: String!
          owned: Boolean!
        }
        type Game {
          round: Int!
          date: AWSDateTime!
        }
        type Query {
          getTeams: [Team]!
          getGames: [Game]!
        }
        type Mutation {
          createTeam(name: String!): Team!
        }
        type Subscription {
          subscribeToTeams: Team
            @aws_subscribe(mutations: ["createTeam"])
        }

  ###########################
  #    AppSync Resolvers    #
  ###########################

  TeamOwnedResolver:
    DependsOn: BloodrushQLSchema
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt BloodrushQLApi.ApiId
      TypeName: 'Team'
      FieldName: 'owned'
      DataSourceName: !GetAtt LocalDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "payload": "${ctx.source.owner}"
        }
      ResponseMappingTemplate: |
        #if($ctx.result == $context.identity.username)
            true
        #else
            false
        #end

  GetGamesResolver:
    DependsOn: BloodrushQLSchema
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt BloodrushQLApi.ApiId
      TypeName: 'Query'
      FieldName: 'getGames'
      DataSourceName: !GetAtt GamesTableDataSource.Name
      RequestMappingTemplate: |
        {
            "version": "2017-02-28",
            "operation": "Scan"
        }
      ResponseMappingTemplate: |
        $utils.toJson($ctx.result.Items)

  # Queries

  GetTeamsResolver:
    DependsOn: BloodrushQLSchema
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt BloodrushQLApi.ApiId
      TypeName: 'Query'
      FieldName: 'getTeams'
      DataSourceName: !GetAtt TeamsTableDataSource.Name
      RequestMappingTemplate: |
        {
            "version": "2017-02-28",
            "operation": "Scan"
        }
      ResponseMappingTemplate: |
        $utils.toJson($ctx.result.Items)

  GetGamesResolver:
    DependsOn: BloodrushQLSchema
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt BloodrushQLApi.ApiId
      TypeName: 'Query'
      FieldName: 'getGames'
      DataSourceName: !GetAtt GamesTableDataSource.Name
      RequestMappingTemplate: |
        {
            "version": "2017-02-28",
            "operation": "Scan"
        }
      ResponseMappingTemplate: |
        $utils.toJson($ctx.result.Items)

  # Mutations

  CreateTeamResolver:
    DependsOn: BloodrushQLSchema
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt BloodrushQLApi.ApiId
      TypeName: 'Mutation'
      FieldName: 'createTeam'
      DataSourceName: !GetAtt TeamsTableDataSource.Name
      RequestMappingTemplate: |
        {
            "version": "2017-02-28",
            "operation": "PutItem",
            "key": {
              "id": $util.dynamodb.toDynamoDBJson($utils.autoId())
            },
            "attributeValues": {
              "name": $util.dynamodb.toDynamoDBJson($ctx.arguments.name),
              "owner": $util.dynamodb.toDynamoDBJson($ctx.identity.username)
            }
        }
      ResponseMappingTemplate: |
        $utils.toJson($ctx.result)

  #############################
  #    AppSync Datasources    #
  #############################

  TeamsTableDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt BloodrushQLApi.ApiId
      Name: 'TeamsTableDataSource'
      Type: 'AMAZON_DYNAMODB'
      DynamoDBConfig:
        TableName: !Ref TeamsTable
        AwsRegion: !Ref AWS::Region
      ServiceRoleArn: !GetAtt ServiceRole.Arn

  GamesTableDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt BloodrushQLApi.ApiId
      Name: 'GamesTableDataSource'
      Type: 'AMAZON_DYNAMODB'
      DynamoDBConfig:
        TableName: !GetAtt GamesTable.Arn
        AwsRegion: !Ref AWS::Region
      ServiceRoleArn: !GetAtt ServiceRole.Arn

  LocalDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt BloodrushQLApi.ApiId
      Name: 'LocalDataSource'
      Description: 'Local AppSync datasource'
      Type: 'NONE'
      ServiceRoleArn: !GetAtt ServiceRole.Arn

  ##############################
  #    IAM Roles & Policies    #
  ##############################

  DynamoDBAccessPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: 'dynamodb-access'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action: 'dynamodb:*'
            Resource:
              - !GetAtt TeamsTable.Arn
              - !GetAtt GamesTable.Arn
      Roles:
        - Ref: ServiceRole

  ServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'appsync.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'

  ##########################
  #    Template Outputs    #
  ##########################

Outputs:
  GraphQLApi:
    Description: GraphQL endpoint
    Value: !GetAtt BloodrushQLApi.GraphQLUrl
  UserPoolId:
    Description: User pool id
    Value: !Ref CognitoPool
  WebUserPoolClientId:
    Description: Web user pool client ID
    Value: !Ref WebClientCognito
